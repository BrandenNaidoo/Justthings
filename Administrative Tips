#Windows Clear Logs
for /f "tokens=*" %1 in ('wevtutil.exe el') do wevtutil.exe cl "%1"

wevtutil el | Foreach-Object {wevtutil cl "$_"}

for /F "tokens=1,2 delims= " %G in ('cmdkey /list ^| findstr Target') do  cmdkey /delete %H

#Linux Clear Logs

cat /dev/null > ~/.bash_history && history -c && exit

#Linux - Backup Directories
tar -zcvf fileName_$(date +%Y-%m-%d_%H-%M-%S).sql.gz fileName

#Linux - Backup SQL
mysqldump --user userName --all-databases > all-databases.sql

#Uncompress all files including subdirectories
gzip -d $(find ./ -type f -name '*.gz')

#Check Linux file sizes.
ls -l filename #check size of the specified file
ls -l * #check size of all the files in the current directory
ls -al * #check size of all the files including hidden files in the current directory
ls -al dir/ #check size of all the files including hidden files in the ‘dir’ directory
du -sh filename

#Exchange log clean up.

# Set execution policy if not set
$ExecutionPolicy = Get-ExecutionPolicy
if ($ExecutionPolicy -ne "RemoteSigned") {
    Set-ExecutionPolicy RemoteSigned -Force
}

# Cleanup logs older than the set of days in numbers
$days = 2

# Path of the logs that you like to cleanup
$IISLogPath = "C:\inetpub\logs\LogFiles\"
$ExchangeLoggingPath = "C:\Program Files\Microsoft\Exchange Server\V15\Logging\"
$ETLLoggingPath = "C:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\Diagnostics\ETLTraces\"
$ETLLoggingPath2 = "C:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\Diagnostics\Logs\"

# Clean the logs
Function CleanLogfiles($TargetFolder) {
    Write-Host -Debug -ForegroundColor Yellow -BackgroundColor Cyan $TargetFolder

    if (Test-Path $TargetFolder) {
        $Now = Get-Date
        $LastWrite = $Now.AddDays(-$days)
        $Files = Get-ChildItem $TargetFolder -Recurse | Where-Object { $_.Name -like "*.log" -or $_.Name -like "*.blg" -or $_.Name -   like "*.etl" } | Where-Object { $_.lastWriteTime -le "$lastwrite" } | Select-Object FullName
        foreach ($File in $Files) {
        $FullFileName = $File.FullName  
        Write-Host "Deleting file $FullFileName" -ForegroundColor "yellow"; 
        Remove-Item $FullFileName -ErrorAction SilentlyContinue | out-null
        }
    }
    Else {
        Write-Host "The folder $TargetFolder doesn't exist! Check the folder path!" -ForegroundColor "red"
    }
}
CleanLogfiles($IISLogPath)
CleanLogfiles($ExchangeLoggingPath)
CleanLogfiles($ETLLoggingPath)
CleanLogfiles($ETLLoggingPath2)

#Disable AutoPlay on endpoints.

Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
sleep 3

$path = "HKLM:\Software\Microsoft\Windows\CurrentVersion\policies\Explorer"
set-ItemProperty $path -Name "NoDriveTypeAutorun" -Type "DWord"-Value 0xFF

sleep 3

$path = "HKLM:\Software\Microsoft\Windows\CurrentVersion\policies\Explorer"
set-ItemProperty $path -Name "NoAutorun" -Type "DWord" -Value 1

sleep 3

Set-ExecutionPolicy -ExecutionPolicy restricted -Force

#Locate dead LUNs via console on ESX.

#First find Dead Path Link

esxcfg-mpath -L | more

#List which drives are used by server and naa.xx number

esxcfg-scsidevs --vmfs
Rescan vmhba in my case vmhba37
esxcfg-rescan vmhba37

#To shutdown the VM
vim-cmd vmsvc/getallvms | grep <vm name>
vim-cmd vmsvc/power.getstate <vmid>
vim-cmd vmsvc/power.off <vmid>

#List all world id
vm-support -x
To Kill that vm
vm-support -X <world id>

#Masking a LUN from ESXi using the MASK_PATH plug-in
#check Mask
esxcfg-mpath -G

#List claimrules esxcli corestorage claimrule list if you sill have problem with dead path, you can mask

esxcli corestorage claimrule add --rule 102 -t location -A vmhba37 -C 3 -T 0 -L 27 -d naa.600xxxxxx -P MASK_PATH –

#Calendar Share permissions - Exchange Online 

Connect-ExchangeOnline -PSSessionOption -IdleTimeout <ms> -UserPrincipalName <upn> -ShowProgress $true

foreach($user in Get-Mailbox -RecipientTypeDetails UserMailbox) {

$cal = $user.alias+”:\Calendar”

Set-MailboxFolderPermission -Identity $cal -User Default -AccessRights LimitedDetails

    }

       $file=”C:\Temp\Calendar-Post.csv”
       $Usermailboxes = Get-Mailbox -RecipientTypeDetails UserMailbox
       foreach($user in $usermailboxes) {
       $cal = $user.alias+":\Calendar"
       $perms = get-MailboxFolderPermission -Identity $cal -User Default
       $Perms | select identity, Foldername, AccessRights | export-csv $file -append
    }
    
#Services accounts with specified accounts in use.

Get-Content Server.txt | ForEach-Object { Get-WmiObject win32_service | ft name, startname, startmode $_ } | Out-File -FilePath .\Services_with_Administrator_Account_Attached.txt

#Manual Administrator lookup

Get-WmiObject win32_service | ft name, startname, startmode >c:\temp\servers_with_administrator_account.txt


